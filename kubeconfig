Kube config file : A file that is used to configure clusters is called kube config file 

By default kubectl looks for a file named config  in the $HOME/.kube directory.

we can specify other kubeconfig files by setting KUBECONFIG environment variable or by setting the kubeconfig flag 

kubeconfig is in specific format 
- clusters - multiple clusters for diff environments
- Users - Admin user, dev user, prod user 
- contexts - Admin@Production this will use the admin account access a prod cluster; Dev@Google access with dev credentials 

Note: we are not creating any new users or configuring any kind of user access or authorization in the cluster with this process 
we are using existing users with th existing priviledges and defining wht user we are going to access what cluster tht way we dont have to specify user certificates and server address in eacha nd every kubectl command it run

--server my-kube-playground:6443
--client-key admin.key
--client-certificate admin.crt
--certificate-authority ca.crt

server specification will goes in to the - clusters section 
Admin users keys and certificates goes in to the  --client-key admin.key ,--client-certificate admin.crt-users 
contexts specifies to use my-kube-admin@mykubeplayground cluster user to access

For accessing single cluster is the below yaml 

Kube config file :
apiversion: v1
kind: Config
clusters:
- name: my-kube-playground
  cluster:
    certificate-authority: ca.crt
    server: https://my-kube-playground:6443
contexts:
- name: my-kube-admin@my-kube-playground
  context:
    cluster: my-kube-playground
    user: my-kube-admin
users:
- name: my-kube-admin
  user: 
    client-certificate: admin.crt
    client-key: admin.key


--------------------------------------------

Below is the yaml to access diffferent clusters tht we use on a daily basis user credentials as well as context

Kube config file  
apiversion: v1
kind: Config
clusters:
- name: my-kube-playground  (values hidden)
- name: developemnt
- name: production
- name: google
 
contexts:
- name: my-kube-admin@my-kube-playground
- name: dev-user@google
- name: prod-user@production
  
users:
- name: my-kube-admin
- name: admin
- name: dev-user
- name: prod-user

after creating the above yaml we dont need to create any other object or service . The file is left as is and it is read by kubectl command 


How will kubectl know which context to use from 3 context 
we can specify a default context to use by adding a field in the yaml code as below 

apiversion: v1
kind: Config
current-context: dev-user@google
clusters:
- name: my-kube-playground  (values hidden)
- name: developemnt
- name: production
- name: google
 
contexts:
- name: my-kube-admin@my-kube-playground
- name: dev-user@google
- name: prod-user@production
  
users:
- name: my-kube-admin
- name: admin
- name: dev-user
- name: prod-user


we can use command line option available within the kubectl to view and modify kube config files 

To view the current file being used run the 

kubectl config view 
it lists clusters , context and users as well as current context set

How to change context from current context dev-user@google to prod--user@production

kubectl config use-context prod-user@production 

the same will be automatically updated in file as well 4

kubectl config -h gives the lists of contexts

-----------------------------------------------

Wht abt namespaces 
each cluster may be configured with multiple namespaces 

we can use context to switch to particular namespace 

------------------------------------------------


Certificates in kubeconfig 

method 1 which is not recommended at all

ca.crt contents

---BEGIN CERTIFICATE---
MAFBDFSKUGDFNBCJBNXFHBNVBN CVBKBNCV VMCNBFIGNN
 CBJBNIUBVNBKCNBKFNLMN,VBMNVBNLBVNV,NV.NOIFBDN
----END CERTIFICATE ---------

apiVersion: v1
kind: Config
clusters:
- name: production
  cluster: 
    certificate-authority: /etc/kubernetes/pki/ca.crt

INSTEAD USING  certificate-authority: /etc/kubernetes/pki/ca.crt and path to the file 

we can use as below 

you can encrypt the certificate with base64 and give as below 

 cat ca.crt | base64
LSJSDFBDNGBDFJGHDFJVBDFMBDJHVCBCVBNCV
DFHZJVJVXCMNVJFHBJDBDBCKJVHBZBCVMBNCM
DFHBVJDFHVDFBNCBCVBCVJBHC


apiVersion: v1                                                                                  
kind: Config                                                                                     
clusters:
- name: production
  cluster:
    certificate-authority-date: LSJSDFBDNGBDFJGHDFJVBDFMBDJHVCBCVBNCV
                                DFHZJVJVXCMNVJFHBJDBDBCKJVHBZBCVMBNCM
                                DFHBVJDFHVDFBNCBCVBCVJBHC

if you use decode  echo "LSJ.." | base64 --decode 

---BEGIN CERTIFICATE---
MAFBDFSKUGDFNBCJBNXFHBNVBN CVBKBNCV VMCNBFIGNN
 CBJBNIUBVNBKCNBKFNLMN,VBMNVBNLBVNV,NV.NOIFBDN
----END CERTIFICATE ---------

-





 





